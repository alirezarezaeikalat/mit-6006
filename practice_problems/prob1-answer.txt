1. (logn)^a = O(n^b) for any constants a and b


Problem 1.1:

    a. f1 = (logn)^2019 < f5 = nlogn < f2 = n^2 * log(n^2019) < f3 = n^3 < f4 = 2.019 ^ n 

    b.  
        (n) = n! / (k! * (n-k)!)
         K

         [ATTENTION]
         n! ~ sqrt(2*pi*n) (n/e)^n (Stirling's approximation)
         
         [ATTENTION]
         log(n!) ~ Theta(nlogn)
         
         f1 = [2 ^ n]
         f2 = [n ^ 3]
         f3 = (n)   =  n! / ((n/2)!) ^ 2  => using Stirling's approximation  = [Theta(2^n / sqrt(n))]
               n/2
         f4 = n! = [Theta(sqrt(n)*(n/e) ^ n)]
         f5 = (n) = [Theta(n^3)]
               3
            
        answer: {f2, f5} < f3 < f1 < f4

Problem 1.2: Given a data structure D supporting the four first/last sequence operations:

                  --D.insert_first(x), D.delete_first(), D.insert_last(x), D.delete_last()--,
                  each in O(1) time, describe algorithms to implement the following higher-level operations in terms

                  of the lower-level operations. Recall that delete operations return the deleted item.

      a. swap_ends(D)

            x1 = delete_first(D)
            x_last = delete_last(D) 
            insert_first(x_last)
            insert_last(x1)
      
      b. shift left(D, k) : 
            
            Move the first k items in order to the end of the sequence n D
            in O(k) time. (After, the k th item should be last and the (k + 1) st item should be first.):

            // For algorithm

            for i in range(0...k)
                  x = D.delete_first()
                  D.insert_last(x)

            
            // Recursively
            
            if k < 1 Or k > len(D) - 1
                  do nothing
            
            else: 
                  x = D.delete_first()
                  D.insert_last(x)
                  shift_left(D, k - 1)

Problem 1.3: 
      A dynamic array can implement a Sequence interface supporting worst-case O(1)-time indexing as
      well as insertion and removal of items at the back of the array in amortized constant time. However,
      --insertion and deletion at the front-- of a dynamic array are not efficient as every entry must be shifted
      to maintain the sequential order of entries, taking linear time.
      On the other hand, a linked-list data structure can be made to support insertion and removal operations at both ends 
      in worst-case O(1) time (see PS1), but at the expense of linear-time indexing.
      Show that we can have the best of both worlds: design a data structure to store a sequence of items
      that supports worst-case O(1)-time index lookup, as well as amortized O(1)-time insertion and
      removal at both ends. Your data structure should use O(n) space to store n items.

      [Two ways of approaching]

      1. use dynamic array with empty space in the front 

      2. Use two dynamic arrays one for the first half and second one for the second half

Problem 1.4: 

      a. Find nth node in the linked list 

      b. Reverse the next pointers after the nth node 

      c. Clean up ends

            def reorder_students(L):
                  n = len(L) // 2 # find the n-th node
                  head = L.head
                  for _ in range(n - 1):        # reach the nth node
                        head = head.next
                  nth_node = head 
                  nth_plus_one_node = nth_node.next               
                  prev, head, next = nth_node, nth_plus_one_node, nth_plus_one_node
                  
                  for _ in range(n):
                        next = head.next
                        head.next = prev
                        prev, head = head, next
                  last_node = prev
                  nth_node.next = last_node # relink front and back of last half
                  nth_plus_one_node.next = None
                  return